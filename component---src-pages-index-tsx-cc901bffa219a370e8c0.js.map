{"version":3,"file":"component---src-pages-index-tsx-cc901bffa219a370e8c0.js","mappings":"oKAiEA,IApDY,WACV,IAAMA,GAAOC,EAAAA,EAAAA,gBAAe,cAoB5B,EAA2BD,EAAKE,KAAKC,aAA7BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAChB,OACE,uBACEC,MAAO,CACLC,QAAQ,OACRC,cAAcC,EAAAA,EAAAA,IAAO,OAGvB,gBAAC,EAAAC,EAAD,CACEC,MAAOX,EAAKY,OAAOC,gBAAgBC,gBACnCC,IAAKX,EAAOY,KACZV,MAAO,CACLW,aAAaR,EAAAA,EAAAA,IAAO,IACpBD,aAAc,EACdU,SAAU,GACVC,aAAa,QAEfC,SAAU,CACRD,aAAa,SAEjB,uCACa,8BAASf,EAAOY,MAD7B,IAC6CZ,EAAOiB,QADpD,IAGE,qBAAGC,KAAI,uBAAyBjB,EAAOkB,QAAWC,OAAO,WAAzD,0C,2FCcR,UAtCkB,SAAC,GAAwC,IAAtCxB,EAAsC,EAAtCA,KAAMyB,EAAgC,EAAhCA,SACnBC,EAAY1B,EAAKE,KAAKC,aAAawB,MACnCC,EAAQ5B,EAAK6B,kBAAkBC,MAErC,OACE,gBAAC,IAAD,CAAQL,SAAUA,EAAUE,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,SACX,gBAAC,IAAD,MACCC,EAAMG,KAAI,YAAc,IAAXC,EAAW,EAAXA,KACNL,EAAQK,EAAKC,YAAYN,OAASK,EAAKE,OAAOC,KACpD,OACE,2BAASC,IAAKJ,EAAKE,OAAOC,MACxB,8BACE,sBACE7B,MAAO,CACLE,cAAcC,EAAAA,EAAAA,IAAO,EAAI,KAG3B,gBAAC,EAAA4B,KAAD,CAAM/B,MAAO,CAAEgC,UAAW,QAAUC,GAAIP,EAAKE,OAAOC,MACjDR,IAGL,6BAAQK,EAAKC,YAAYO,KAAzB,KAAiC,IAAjC,IAAuCR,EAAKS,WAA5C,cAEF,+BACE,qBACEC,wBAAyB,CACvBC,OAAQX,EAAKC,YAAYW,aAAeZ,EAAKa","sources":["webpack://one-percent-blog/./src/components/bio.js","webpack://one-percent-blog/./src/pages/index.tsx"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nimport { rhythm } from \"../utils/typography\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`query BioQuery {\n  avatar: file(absolutePath: {regex: \"/profile-pic.png/\"}) {\n    childImageSharp {\n      gatsbyImageData(width: 50, height: 50, layout: FIXED)\n    }\n  }\n  site {\n    siteMetadata {\n      author {\n        name\n        summary\n      }\n      social {\n        twitter\n      }\n    }\n  }\n}\n`)\n\n  const { author, social } = data.site.siteMetadata\n  return (\n    <div\n      style={{\n        display: `flex`,\n        marginBottom: rhythm(2.5),\n      }}\n    >\n      <GatsbyImage\n        image={data.avatar.childImageSharp.gatsbyImageData}\n        alt={author.name}\n        style={{\n          marginRight: rhythm(1 / 2),\n          marginBottom: 0,\n          minWidth: 50,\n          borderRadius: `100%`,\n        }}\n        imgStyle={{\n          borderRadius: `50%`,\n        }} />\n      <p>\n        Written by <strong>{author.name}</strong> {author.summary}\n        {` `}\n        <a href={`https://twitter.com/${social.twitter}`} target=\"__blank\">\n          You should follow me on Twitter !!\n        </a>\n      </p>\n    </div>\n  );\n}\n\nexport default Bio\n","// Gatsby supports TypeScript natively!\nimport React from \"react\"\nimport { PageProps, Link, graphql } from \"gatsby\"\nimport '../style.css'\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\n\ntype Data = {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    edges: {\n      node: {\n        excerpt: string\n        frontmatter: {\n          title: string\n          date: string\n          description: string\n        }\n        timeToRead: string\n        fields: {\n          slug: string\n        }\n      }\n    }[]\n  }\n}\n\nconst BlogIndex = ({ data, location }: PageProps<Data>) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"Home\" />\n      <Bio />\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug\n        return (\n          <article key={node.fields.slug}>\n            <header>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                  {title}\n                </Link>\n              </h3>\n              <small>{node.frontmatter.date} â€¢{' '} {node.timeToRead} min read</small>\n            </header>\n            <section>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt,\n                }}\n              />\n            </section>\n          </article>\n        )\n      })}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["data","useStaticQuery","site","siteMetadata","author","social","style","display","marginBottom","rhythm","G","image","avatar","childImageSharp","gatsbyImageData","alt","name","marginRight","minWidth","borderRadius","imgStyle","summary","href","twitter","target","location","siteTitle","title","posts","allMarkdownRemark","edges","map","node","frontmatter","fields","slug","key","Link","boxShadow","to","date","timeToRead","dangerouslySetInnerHTML","__html","description","excerpt"],"sourceRoot":""}